# 🌐 WEB DEVELOPMENT

## 📌 What is Web Development?
Basically Web Development is a process of building and maintaining websites and web applications.
Web Development involves designing, coding, deploying, and maintaining a website or application.

## 📌 Types of Web Development?
a. Frontend Development.
--> Frontend Development works on Client side.
--> Focus on UI/UX design by using HTML,CSS,JAVASCRIPT.
--> Frontend Development is a part of website that users interact with directly.
--> Frontend Development uses framework like React, Angular and Vue.js.
b. Backend Development.
--> Backend Development works on Server side.
--> Backend Development manages data, authentication and business logic using Nodejs Expressjs and database.
--> Example of Backend frameworks are;
               For Python-- Django,Flask,FastAPI.
               For Javascript/Typescript-- Expressjs Nodejs Nestjs Koajs.
               For Java-- Springboot,Micronaut.
c. Full Stack Web Development.
--> Full Stack Web Development is a combination of both frontend and backend technologies.

## 📌 Key Components of  Web Development?
a. Frontend Development.
b. Backend Development.
c. Database.
--> Database stores and manages data for the website or application.
--> Database can be SQL based which include MYSQL, Postgre SQL) or NoSQL based which include MongoDB.
d. Version Control.
--> Version Control helps in tracking and managing changes.
--> Version Control includes Git, Github.

## 📌 Workflow of a Full Stack Web Development Project?
1. Requirement Gathering & Planning.
--> It includes:
                  Understand the goal of the project.
                  Identify features: login/signup, dashboard, payments, etc.
                  Decide tech stack (e.g., MERN: MongoDB, Express, React, Node.js OR MySQL + Express + React + Node.js).
2. Design & Architecture
--> It includes:
          Create wireframes/UI design using Figma/Canva.
          Define database schema (ERD diagrams: users, products, orders, etc.).
          Plan API routes (REST or GraphQL).
          Decide folder structure:
project/
├── backend/
├── frontend/
├── database/
└── docs/

3. Frontend Development (Client-Side)
--> Frontend Development includes:
                  Choosing the  framework (React, Angular, Vue, or plain HTML/CSS/JS).
                  Build UI components (Navbar, Forms, Product Cards, etc.).
                  Implement routing (React Router for SPAs).
                  Connect to backend APIs using fetch / axios.
                  Handle state management (Redux, Context API, etc.).
4. Backend Development (Server-Side)
--> Backend Development includes:
                    Set up Node.js + Express (or Django, Spring Boot, etc.).
                    Configure API routes.
                    Add authentication (JWT, sessions).
                    Implement business logic (e.g., order total calculation).
                    Connect to database (MongoDB, MySQL, PostgreSQL).
5. Database Design
--> Database Design includes:
             Create tables/collections that includes Users, Products, Orders, Messages,
             Define relationships (1-to-many, many-to-many).
             Write queries (SQL/NoSQL).
             Implement validation and indexing.
6. Integration (Frontend + Backend + DB)
--> Integration includes:
                Frontend sends requests → Backend processes → Database stores data.
--> Example workflow:
                          User clicks "Sign Up" → frontend form → POST /signup API.
                          Backend validates + stores in DB.
                          Response sent back to frontend → show success/failure.
7. Testing
--> Testing includes:
                       Unit Testing: test functions/components individually.
                       Integration Testing: check frontend-backend connection.
                       User Acceptance Testing (UAT): ensure features work as expected.
8. Deployment
--> Deployment includes:
                       Frontend: Deploy to Vercel, Netlify, or static hosting.
                       Backend: Deploy to Railway, Render, AWS, or Heroku.
                       Database: Hosted on MongoDB Atlas, MySQL Railway, or AWS RDS.
                       Configure environment variables (.env for secrets).
9. Monitoring & Maintenance
--> Monitoring & Maintenance includes:
                    Use logging & monitoring tools (Winston, Morgan, Datadog).
                    Collect user feedback.
                    Fix bugs, update features.
                    Apply security patches (sanitize inputs, update dependencies).

Summary of Workflow of Full Stack Web Development:
-->  Plan → Design → Frontend → Backend → Database → Integration → Testing → Deployment → Maintenance



# 🌐 Now Let's Come to HTML

## 📌 What is HTML?
--> Basically HTML stands for HyperText Markup Language.
--> HTML is not a programming language  but a markup language used to create the structure and content of a webpage.
--> HyperText: Refers to the "links" that connect web pages, allowing you to navigate the internet.
    Markup Language: Refers to the use of "tags" (like <h1> or <p>) to define the layout and elements of your content.
--> HTML is the skeleton of the page that gives every website its shape.

## 📌 Key elements of HTML?
a. heading.
b. paragraph.
c. links.
d. images.

## 📌 Why  HTML essential?
a. to build websites.
b. to understand other languages like CSS, JAVASCRIPT, REACT.

## 📌 Structure of HTML?
<!DOCTYPE html>              // shows that this is HTML5 document
<html>                       // root elements and all contents comes under this
  <head>                     // has invisible info like title, meta-tags, CSS
    <title>My Website</title> 
  </head>
  <body>                     // visible content like heading,paragraph,image,form
    <h1>Hello World</h1>
    <p>This is my first website</p>
  </body>
</html>

## 📌 Basic Tags in HTML?
a. Heading tags.
b. Paragraph tags.
c. Line Break tags.
d. links.
e. images.
f. center.
g. listing tags.
h. text formatting tags.
i. fonts tags.
j. tables tags.
k. forms tags.
l. Semantic HTML tags.
m. <div> tags.
n. <iframe> tags.
o. <video> tags.
p. <audio> tags.

## 📌 Heading tags in HTML?
--> HTML provides six levels of heading.
--> <h1> is most important and is the biggest.<h6> is least important and is smallest.

## 📌 paragraph tags in HTML?
--> <p> tags used for text.
--> <p> This is a paragraph.</p>

## 📌 Line Break tags in HTML?
--> The <br> tag is used to insert a line break in the text. 
--> It forces the content after it to appear on the next line. 
--> This tag is used whenever you want the text to break into a new line without starting a new paragraph.
--> <p>Hello<br>You delivered your assignment on time.<br>Thanks<br>Mahnaz</p>
Note: The <br> tag is an empty tag and does not need a closing tag.

## 📌 links tags in HTML?
--> <a href> tags are used for linking.
--> <a href="https://google.com"> Go to Google. </a> 
Here, a is anchor tag that is used to creates a hyperlinks. href attributes specify URL to which the links points.

## 📌 images tags in HTML?
--> <img src="image.jpg" alt="MyImage" width="200" height="150">
Here, alt is alternative text if image not loads.

## 📌 center tags in HTML?
--> <center> tag previously used to align content to the center of a web page, is deprecated in HTML5. 
--> You can use the text-align: center; property of CSS to center text or inline elements.
--> example:
<!DOCTYPE html>
<html>
<head>
   <title>Centering Content Example</title>
   <style>
      .center-text {
         text-align: center;
      }
   </style>
</head>
<body>
   <p>This text is not in the center.</p>
   <p class="center-text">This text is in the center.</p>
</body>
</html>

## 📌 listing tags in HTML?
--> example
<ul> 
  <li>Milk</li>
  <li>Bread</li>
</ul>
<ol>  
  <li>Wake up</li>
  <li>Brush teeth</li>
</ol>
Here, ul means unordered list and ol means ordered list.

## 📌 text formatting tags in HTML?
--> text formatting tags are:
<b> → bold
<i> → italic
<u> → underline
<strong> → important (bold with meaning)
<em> → emphasized (italic with meaning)
--> example
<p>This is <b>bold</b>, <i>italic</i>, <u>underlined</u>.</p>
<p>This is <strong>important</strong> and <em>emphasized</em>.</p>

## 📌 fonts tags in HTML?
--> fonts tags specifies the size, color, and face of the text to be displayed on the webpage.
--> The <font> tag has three attributes called size, color, and face to customize your fonts. 
--> The font and basefont tags are deprecated, and they are supposed to be removed in a future version of HTML. So they should not be used; rather, it's suggested to use CSS styles to manipulate your fonts.
--> To set the font size of a web page, we use the size attribute. This attribute allows us to set the font size between 1 and 7, where 1 is the smallest font size whereas 7 is the largest. The default size of a font is 3.
--> You can set the font face (family) using the face attribute.
--> We can set any font color of our choice to the texts using the color attribute. To specify the color, we can use either the color name or hexadecimal code of that color.
Standard Color Names
ColorName	       Hex Value	        ColorName          HexValue          ColorName        Hex Value         ColorName        HexValue
aqua	           #00ffff	           black	           #000000	         blue	            #0000ff	          fuchsia	         #ff00ff	
green	           #008000	           gray	             #808080	         lime	            #00ff00	          maroon	         #800000	
navy	           #000080	           olive	           #808000	         purple	          #800080	          red	             #ff0000	
silver	         #c0c0c0	           teal	             #008080	         white	          #ffffff	          yellow	         #ffff00	
aliceblue	       #f0f8ff	           antiquewhite	     #faebd7	         aquamarine	      #7fffd4	          azure	           #f0ffff	
beige	           #f5f5dc	           bisque	           #ffe4c4	         blanchedalmond	  #ffebcd	          blueviolet	     #8a2be2	
brown	           #a52a2a	           burlywood	       #deb887	         cadetblue	      #5f9ea0	          chartreuse	     #7fff00	
chocolate	       #d2691e	           coral	           #ff7f50	         cornflowerblue	  #6495ed	          cornsilk	       #fff8dc	
crimson	         #dc143c	           cyan	             #00ffff	         darkblue	        #00008b	          darkcyan	       #008b8b	
darkgoldenrod	   #b8860b	           darkgray	         #a9a9a9	         darkgreen	      #006400	          darkkhaki	       #bdb76b	
darkmagenta	     #8b008b	           darkolivegreen	   #556b2f	         darkorange	      #ff8c00	          darkorchid	     #9932cc	
darkred	         #8b0000	           darksalmon	       #e9967a	
darkseagreen	   #8fbc8f	
darkslateblue	   #483d8b	
darkslategray	   #2f4f4f	
darkturquoise	   #00ced1	
darkviolet	     #9400d3	
deeppink	       #ff1493	
deepskyblue	     #00bfff	
dimgray	         #696969	
dodgerblue	     #1e90ff	
firebrick	       #b22222	               floralwhite	     #fffaf0	          forestgreen	     #228b22	
gainsboro	       #dcdcdc	
ghostwhite	     #f8f8ff	
gold	           #ffd700	
goldenrod	       #daa520	
gray	           #808080	
greenyellow	     #adff2f	
honeydew	       #f0fff0	
hotpink	         #ff69b4	
indianred	       #cd5c5c	
indigo	         #4b0082	
ivory	           #fffff0	
khaki	           #f0e68c	
lavender	       #e6e6fa	
lavenderblush	   #fff0f5	
lawngreen	       #7cfc00	
lemonchiffon	   #fffacd	
lightblue	       #add8e6	
lightcoral	     #f08080	
lightcyan	       #e0ffff	
lightgoldenrodyellow	#fafad2	
lightgreen	      #90ee90	
lightgrey	        #d3d3d3	
lightpink	        #ffb6c1	
lightsalmon	      #ffa07a	
lightseagreen	    #20b2aa	
lightskyblue	    #87cefa	
lightslategray	  #778899	
lightsteelblue	  #b0c4de	
lightyellow	      #ffffe0	
limegreen	        #32cd32	
linen	            #faf0e6	
magenta	          #ff00ff	
mediumblue	      #0000cd	
mediumorchid	    #ba55d3	
mediumpurple	    #9370db	
midnightblue	    #191970	
mistyrose	        #ffe4e1	
moccasin	        #ffe4b5	
oldlace	          #fdf5e6	
orange	          #ffa500	
orchid	          #da70d6	
peachpuff	        #ffdab9	
peru	            #cd853f	
pink	            #ffc0cb	
plum	            #dda0dd	
purple	          #800080	
rosybrown	        #bc8f8f	
royalblue	        #4169e1	
salmon	          #fa8072	
sandybrown	      #f4a460	
seagreen	        #2e8b57	
sienna	          #a0522d	
skyblue	          #87ceeb	
slateblue	        #6a5acd	
steelblue	        #4682b4	
tan	               #d2b48c	           thistle	          #d8bfd8	                  tomato	          #ff6347	            violet	          #ee82ee	
wheat	             #f5deb3	           whitesmoke	        #f5f5f5	                  yellow	          #ffff00	            yellowgreen	       #9acd32

## 📌 Tables tags in HTML?
--> Table tags represents data such as text, images in a structured format with rows and columns.
--> Tables can be created by using <table> tag and primary tags used with <table> tags are <tr>, <td>, <th>.
Here, <td> represents table data. <tr> represents table row. <th> represents table header.
--> Table width and height set using either attributes or CSS properties. These Values can be defined using pixels or percentage.
--> Examples:
<table border="1">              //starting of table
  <thead>
    <tr>
      <th>Name</th>
      <th>Age</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Diya</td>
      <td>21</td>
    </tr>
    <tr>
      <td>Riya</td>
      <td>22</td>
    </tr>
  </tbody>
</table>

## 📌 forms tags in HTML?
--> Forms tags are used to collect data from user and then sent to a server for further processing.
--> Forms tags are created by using <form> tag.
--> Example:
<form>
  <label>Name:</label>
  <input type="text" name="username" placeholder="Enter your name" required><br>
  <label>Email:</label>
  <input type="email" name="email" placeholder="Enter your email"><br>
  <label>Message:</label>
  <textarea name="message" rows="4"></textarea><br>
  <label>Choose option:</label>
  <select>
    <option>Option 1</option>
    <option>Option 2</option>
  </select><br>
  <button type="submit">Submit</button>
</form>
Here, type="text, email, password, number, radio, checkbox, date".          
      name → to identify data in a server.
      value → default value.
      placeholder → hint text.
      required → mandatory input.

## 📌 Semantic tags in HTML?
-->  Semantic HTML shows the meaning of content.
-->  <header> → top section(logo, nav, intro)
     <footer> → bottom section(copyright, links)
     <article> → self-contained content(blog post, news)
     <section> → related content group
     <nav> → navigation links
     <aside> → sidebar(extra info, ads)
-->  Example:
<header>
  <h1>My Website</h1>
  <nav>
    <a href="#">Home</a> | <a href="#">About</a>
  </nav>
</header>
<section>
  <article>
    <h2>Blog Title</h2>
    <p>This is a blog post.</p>
  </article>
</section>
<aside>
  <p>Advertisement</p>
</aside>
<footer>
  <p>© 2025 My Website</p>
</footer>

## 📌 <div> tags in HTML?
--> <div> tags are block-level container  and is used for layout.
--> Example:
<div style="background: lightblue; padding: 10px;">

</div>

## 📌 <iframe> tags in HTML?
--> <iframe> tags are used for embed another webpage.
--> Example:
<iframe src="https://example.com" width="300" height="200"></iframe>

## 📌 <video> tags in HTML?
--> <video> tags are used for adding videos in a webpage.
--> Example:
<video controls width="400">
  <source src="movie.mp4" type="video/mp4">
  Your browser does not support video.
</video>

## 📌 <audio> tags in HTML?
--> <audio> tags are used for adding audios in a webpage.
--> Example:
<audio controls>
  <source src="song.mp3" type="audio/mpeg">
  Your browser does not support audio.
</audio>




# 🌐 Now Let's Come to CSS

## 📌 What is CSS?
--> CSS stands for Cascading Style Sheets. CSS is used to style web pages, making them visually appealing. CSS describes how HTML elements are to be displayed on screen, paper, or in other media.
--> CSS saves a lot of work. It can control the layout of multiple web pages all at once. External stylesheets are stored in CSS files.

## 📌 Why do we use CSS?
--> 
a. CSS provides efficiency in webpage design: It also provides updates so our webpage works appropriately. With the help of CSS, we can create and apply those rules within the website. If we create a webpage design separately, we can make changes in our style sheet, and it will affect all the style sheets.
b. CSS provides faster page download: CSS helps with faster page download because when we download a page, we get the cache that helps to load a page, but with the help of CSS, we can lead to load a lighter page which helps to improve the performance.
c. CSS is easy to work: In CSS, we can visual aspect of the website separate entirely from the content; using CSS, we can create a website that allows us to make quick layou0074.

## 📌 Advantages of  CSS?
--> 
a. Faster page speed: It has a faster page speed than other code's page speeds. With the help of the CSS rule, we can apply it to all occurrences of certain tags in HTML documents.
b. Better user experience: CSS makes a webpage very attractive to the eyes. Also, CSS makes it user-friendly. When the button or text is in a proper format, it improves the user experience.
c. Quicker Development time: With the help of CSS, we can specify the format and style the multiple pages into one code string. In cascading style sheet, we can make a duplicate copy of several website pages.
d. If we make a webpage, it has the same formatting, looks, and feel, so with the help of the CSS rule for one page, and it is sufficient for all the pages.
e. Easy Formatting changes: In CSS, if we need to make changes in the format, it is very easy; we only need to change the one-page format it will automatically apply to the other pages of CSS.
f. There is no need to correct individual pages in a CSS style sheet. If we fix a CSS style sheet, it will automatically update the other CSS style sheet.
g. Compatibility: Compatibility is very important in today's age. If we create any webpage, it should be very responsive and user-friendly. CSS is used with Html to make webpage design responsive.

## 📌 Examples of CSS?
--> <!DOCTYPE html>  
<html>  
<head>  
<style>  
body {  
  background-color:  lightblue;  
}  
h1 {  
  colour: white;  
  text-align: center;  
}  
p {  
  font-family: Verdana;  
  font-size: 20px;  
}  
</style>  
</head>  
<body>  
<h1>My First CSS Example</h1>  
<p>This is a paragraph.</p>  
</body>  
</html>  
## 📌 Types of CSS?
## 📌 Selectors of CSS?
## 📌 Comments of CSS?


# 🌐 Now Let's Come to Javascript

## 📌 What is Javascript?



# 🌐 Now Let's Come to React

## 📌 What is React?
--> ReactJS is an open-source JavaScript library for building dynamic and interactive user interfaces(UIs). React is developed and released by Facebook.
--> React is a simple, feature rich and component based UI library. React is useful for SPA(Single Page Applications).
--> When we say component based, we mean that React develops applications by creating various reusable and independent codes. This UI library is, thus, widely used in web development.

## 📌 Why do we need React?
a) Component Based − ReactJS makes use of multiple components to build an application. These components are independent and have their own logic which makes them reusable throughout the development process. This will drastically reduce the application's development time.
b)Better and Faster Performance − ReactJS uses Virtual DOM. Virtual DOM compares the previous states of components of an application with the current states and only updates the changes in Real DOM. Whereas, conventional web applications update all components again. This helps ReactJS in creating web applications faster.
c)Extremely Flexible − React allows developers and teams to set their own conventions that they deem are best suited and implement it however they see fit, as there are no strict rules for code conventions in React.
d)Creates dynamic applications easily − Dynamic web applications require less coding while offering more functionality. Thus, ReactJS can create them easily.
e)Develops Mobile Applications as well − Not only web applications, React can also develop mobile applications using React Native. React Native is an open-source UI software framework that is derived from React itself. It uses React Framework to develop applications for Android, macOS, Web, Windows etc.
f)Debugging is Easy − The data flow in React is unidirectional, i.e., while designing an app using React, child components are nested within parent components. As the data flows is in a single direction, it gets easier to debug errors and spot the bugs.

## 📌 Applications of React?
a) Facebook, popular social media application − React was originally developed at Facebook (or Meta), so its only natural that they use it to run their application. As for their mobile application, it uses React Native to display Android and iOS components, instead of DOM. Facebook's codebase now includes over 20,000 components and uses the React version that is public.
b) Instagram, popular photo sharing application − Instagram is also completely based on React, as it is powered by Meta as well. The main features to show its usage include Geo-locations, Hashtags, Google Maps APIs etc.
c) Netflix, popular media streaming application − Netflix switched to React in 2015. The factors that mainly influenced this decision are the 1) startup speed to reduce the processing time to render the homepage and enabling dynamic elements in the UI, 2) modularity to allow various features that must coexist with the control experience and 3) runtime performance for efficient UI rendering.
d) Code Academy, popular online training application − Code Academy uses React as the "script is battle-tested, easy to think about, makes SEO easy and is compatible with legacy code and flexible enough for the future".
e) Reddit, popular content sharing application − Reddit is also developed using React from the scratch.

## 📌 Advantages of React?
a) Performance - 
--> React uses Virtual DOM concept to check and update the HTML document. 
--> Virtual DOM is a special DOM created by React. Virtual DOM represents the real DOM of the current document. 
--> Whenever there is a change in the document, React checks the updated virtual DOM with the previous state of the Virtual DOM and update only the different in th actual / real DOM. This improves the performance of the rendering of the HTML document.
b) Easy to learn 
c) Huge collection of third party components - In addition to core react library, React community provides a large number of component for a wide range of application from simple UI component to full fledged PDF Viewer component. React provides multiple option in each category. For example, the advanced state management can be done using either Redux or MobX library. Redux and Mobx are just two popular library to do state management. React has more than 10 library to archive the same functionality. Similarly, React community provides lot of third party library in each category like routing, data grid, calendar, form programming, etc.,
d) Large community - React developer community is a huge community with lot of activities. React community is very active that you can get answer for any react related question / doubts in a few minutes through google, stackoverflow, etc.,
e) SEO Friendliness - React is one of the few JavaScript library to support SEO features. Since React components and JSX are similar to HTML elements, SEO can be easily achieved without much code / setup.
f) Easy kick-starting of the React project
g) Rich set of developer tools
h) Handle large application - React uses composition to merge multiple component into one bigger component, which in turn allows to create much more larger component. React component can be created in a single JavaScript file and can be set as exportable. This feature allows multiple component to be grouped under a common category as module and can be reused in other places.

## 📌 Disadvantages of  React?
a) Lack of quality documentation - React is updated very quickly. Because of this, sometimes the official documentation is not very clear or becomes outdated. Beginners often get confused about which method is correct to use.
b) No standard / recommended way to develop application - React is only a library, not a complete framework. That means there is no fixed rule for how to structure your project or which tools to use. Different developers use different methods, so there’s no “one right way.”
c) Fast development pace - React and its ecosystem (other libraries around React) grow very fast. New updates and tools keep coming. This is good, but for beginners it can be hard to keep up with the changes.
d) Advanced use of JavaScript - To work with React properly, you must already know JavaScript well. If your JavaScript basics are weak, React will feel difficult. React uses many modern JavaScript features.
e) JavaScript extension - In React, you don’t write normal HTML. Instead, you write JSX, which is a special version of JavaScript that looks like HTML. At first, this looks strange and may be confusing, but after practice it becomes easy.
f) Just a UI library - React is not a full framework. It only helps in building the UI (User Interface). For other things like routing, state management, and forms, you need to install extra libraries. So, React alone is not enough for making a complete application.

## 📌 Features of React?
a) Virtual DOM - React makes a copy of the webpage in memory (Virtual DOM). When something changes, React updates only that part instead of reloading the whole page. 
b) Components - Think of components as Lego blocks 🧱. Each block does one job, and you can reuse it many times. Example: One button component can be used everywhere (login, signup, contact).
c) JSX - JSX lets you write HTML inside JavaScript. It looks like HTML but works like JavaScript.
d) One way data binding - Data in React moves only in one direction → parent to child. This makes apps easy to control and debug.
e) Scalable - React can be used for small apps (like a calculator) and big apps (like Instagram).
f) Flexible - React can be used not just for websites, but also for mobile apps (React Native).
g) Modular - React apps are made of small parts (modules/components).

## 📌 React Setup?
For setting up of React we have 2 options:
Option 1: Vite (Fast & Modern)
                  npm create vite@latest my-app
                  cd my-app
                  npm install
                  npm run dev
Option 2: Create React App (CRA)
                       npx create-react-app my-app
                       cd my-app
                       npm start

## 📌 React folder structure?
my-app/
 ┣ src/
 ┃ ┣ App.js       -> main component
 ┃ ┣ index.js     -> entry point
 ┃ ┣ components/  -> reusable components
 ┃ ┗ styles/      -> CSS files
 ┣ public/        -> static files (index.html)
 ┗ package.json   -> dependencies

## 📌 React components and JSX?
--> A component is like a small building block of a React app. Each component does one job and You can reuse it many times. Many components together form a complete app.
--> Types of Components
a. Function Component (most common today)
==> Just a JavaScript function that returns JSX (UI).
==> Example:
function Welcome() {
  return <h2>Hello, Welcome to React!</h2>;
}
Then use it in App.js:
function App() {
  return (
    <div>
      <Welcome />   {/* Component used here */}
    </div>
  );
}
b. Class Component (old style, less used now)
==> Example 
class Welcome extends React.Component {
  render() {
    return <h2>Hello from Class Component!</h2>;
  }
}
==> Why Components are useful?
✅ Reusability → One button, navbar, or card can be reused everywhere.
✅ Easy to maintain → If something breaks, you only fix that component.
✅ Clean code → Small pieces are easier to read than one big file.

--> What is JSX?
==> JSX = JavaScript XML. It looks like HTML, but you write it inside JavaScript. With JSX, you can easily create UI elements.
==> Without JSX (ugly 😵)
                  const element = React.createElement("h1", null, "Hello World");
==> With JSX (easy 😍)
                    const element = <h1>Hello World</h1>;
==> JSX Rules
a. Return only one parent element
return (
  <div>
    <h1>Hello</h1>
    <p>World</p>
  </div>
);
b. Use className instead of class
<h1 className="title">Hello</h1>
c. Close all tags properly
<img src="image.png" />  ✅
d. Use {} to write JavaScript inside JSX
const name = "Diya";
<h1>Hello {name}</h1>
==> Why JSX is useful?
✅ Easy to write → Looks like HTML.
✅ Easy to read → No confusing code.
✅ Lets us mix JS + HTML in one place.
==> Summary.
Component = small building block (reusable, like Lego).
JSX = special syntax that lets you write HTML inside JavaScript.

## 📌 State and Props?
## 📌 React hooks?
## 📌 React router?
## 📌 API Integration in React?
## 📌 React components and JSX?
